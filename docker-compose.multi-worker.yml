# Platform + Multi-Worker Architecture
# 
# This docker-compose sets up:
# - Platform service (PaaS layer) with auth, billing, discovery, routing  
# - CrankDoc worker (document conversion)
# - CrankEmail worker (ML email classification)
# - Proper networking for service discovery
# - Zero-trust mTLS security for all services

services:
  # Platform Service (PaaS Layer)
  platform:
    build:
      context: services
      dockerfile: Dockerfile.platform
    container_name: crank-platform
    ports:
      - "8080:8000"  # HTTP fallback for development
      - "8443:8443"  # HTTPS with mTLS for production
    volumes:
      - certs-volume:/etc/certs  # Share certificates with workers
    environment:
      - PLATFORM_ENV=docker
      - CRANK_ENVIRONMENT=development  # ðŸ”’ Development with HTTPS testing
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/health/live"]  # ðŸ”’ Use HTTPS health check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Document Converter Worker
  crank-doc-converter:
    build:
      context: services
      dockerfile: Dockerfile.crank-doc-converter
    container_name: crank-doc-converter
    ports:
      - "8081:8081"
      - "8002:8443"  # Map to different external port to avoid conflict
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - PLATFORM_URL=https://platform:8443  # ðŸ”’ ZERO-TRUST: Use HTTPS for platform communication
      - CRANK_ENVIRONMENT=development  # ðŸ”’ Development with HTTPS testing
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Email Classifier Worker  
  crank-email-classifier:
    build:
      context: services
      dockerfile: Dockerfile.crank-email-classifier
    container_name: crank-email-classifier
    ports:
      - "8003:8003"
      - "8004:8443"  # Map to different external port to avoid conflict
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - PLATFORM_URL=https://platform:8443  # ðŸ”’ ZERO-TRUST: Use HTTPS for platform communication
      - CRANK_ENVIRONMENT=development  # ðŸ”’ Development with HTTPS testing
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s  # ML models need more time to initialize
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Streaming Service (SSE, WebSocket, Real-time)
  crank-streaming:
    build:
      context: services
      dockerfile: Dockerfile.crank-streaming
    container_name: crank-streaming
    ports:
      - "8011:8011"  # HTTP streaming endpoints and WebSocket
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
      - /home/johnr/projects/parse-email-archive/tests/data:/test-data:ro  # Mount test data
    environment:
      - CRANK_PLATFORM_URL=https://platform:8443
      - CRANK_ENVIRONMENT=development
      - LOG_LEVEL=INFO
    depends_on:
      platform:
        condition: service_healthy
      crank-email-classifier:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Email Parser Worker  
  crank-email-parser:
    build:
      context: services
      dockerfile: Dockerfile.crank-email-parser
    container_name: crank-email-parser
    ports:
      - "8009:8003"  # Use different external port - 8003 is taken by email-classifier
      - "8010:8443"  # Map to different external port to avoid conflict
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - CRANK_PLATFORM_URL=https://platform:8443  # ðŸ”’ ZERO-TRUST: Use HTTPS for platform communication
      - CRANK_ENVIRONMENT=development  # ðŸ”’ Development with HTTPS testing
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s  # Email parser initialization time
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Image Classifier Worker
  crank-image-classifier:
    build:
      context: .
      dockerfile: image-classifier/Dockerfile
    container_name: crank-image-classifier
    ports:
      - "8005:8005"
      - "8006:8443"  # Map to different external port to avoid conflict
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - PLATFORM_URL=https://platform:8443  # ðŸ”’ ZERO-TRUST: Use HTTPS for platform communication
      - CRANK_ENVIRONMENT=development  # ðŸ”’ Development with HTTPS testing
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s  # Computer vision models need time to initialize
    networks:
      - crank-net
    restart: unless-stopped

networks:
  crank-net:
    driver: bridge
    name: crank-network

volumes:
  platform-data:
    name: crank-platform-data
  certs-volume:
    name: crank-platform-certs