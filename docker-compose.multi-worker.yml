# Platform + Multi-Worker Architecture with Proper Port Configuration
# 
# This docker-compose sets up:
# - Platform service (PaaS layer) with auth, billing, discovery, routing  
# - CrankDoc worker (document conversion) - Port 8100
# - CrankEmail Classifier worker (ML email classification) - Port 8200
# - CrankEmail Parser worker (bulk email parsing) - Port 8300
# - CrankStreaming worker (real-time streaming) - Port 8500
# - Proper networking for service discovery
# - Zero-trust mTLS security for all services
# - NO PORT CONFLICTS - Each service has dedicated port range

services:
  # Platform Service (PaaS Layer) - HTTPS/mTLS ONLY
  platform:
    build:
      context: services
      dockerfile: Dockerfile.platform
    container_name: crank-platform
    ports:
      - "${PLATFORM_HTTPS_PORT:-8443}:${PLATFORM_HTTPS_PORT:-8443}"  # ðŸ”’ HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs  # Share certificates with workers
    environment:
      - PLATFORM_ENV=docker
      - CRANK_ENVIRONMENT=development-https  # ðŸ”’ HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_HTTPS_PORT=${PLATFORM_HTTPS_PORT:-8443}
      - HTTPS_ONLY=true  # ðŸ”’ Force HTTPS-only mode
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${PLATFORM_HTTPS_PORT:-8443}/health/live"]  # ðŸ”’ HTTPS with relaxed verification for dev certs
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Document Converter Worker - HTTPS/mTLS ONLY
  crank-doc-converter:
    build:
      context: services
      dockerfile: Dockerfile.crank-doc-converter
    container_name: crank-doc-converter
    ports:
      - "${DOC_CONVERTER_HTTPS_PORT:-8101}:${DOC_CONVERTER_HTTPS_PORT:-8101}"  # ðŸ”’ HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # ðŸ”’ ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=development-https  # ðŸ”’ HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - DOC_CONVERTER_HTTPS_PORT=${DOC_CONVERTER_HTTPS_PORT:-8101}
      - DOC_CONVERTER_HOST=0.0.0.0
      - HTTPS_ONLY=true  # ðŸ”’ Force HTTPS-only mode
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${DOC_CONVERTER_HTTPS_PORT:-8101}/health"]  # ðŸ”’ HTTPS with relaxed verification for dev certs
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Email Classifier Worker - HTTPS/mTLS ONLY
  crank-email-classifier:
    build:
      context: services
      dockerfile: Dockerfile.crank-email-classifier
    container_name: crank-email-classifier
    ports:
      - "${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}:${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}"  # ðŸ”’ HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # ðŸ”’ ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=development-https  # ðŸ”’ HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - EMAIL_CLASSIFIER_HTTPS_PORT=${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}
      - EMAIL_CLASSIFIER_HOST=0.0.0.0
      - HTTPS_ONLY=true  # ðŸ”’ Force HTTPS-only mode
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}/health"]  # ðŸ”’ HTTPS with relaxed verification for dev certs
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 25s  # ML models need more time to initialize
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Email Parser Worker - HTTPS/mTLS ONLY
  crank-email-parser:
    build:
      context: services
      dockerfile: Dockerfile.crank-email-parser
    container_name: crank-email-parser
    ports:
      - "${EMAIL_PARSER_HTTPS_PORT:-8301}:${EMAIL_PARSER_HTTPS_PORT:-8301}"  # ðŸ”’ HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - CRANK_PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # ðŸ”’ ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=production  # ðŸ”’ HTTPS ONLY - no HTTP fallback
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - EMAIL_PARSER_HTTPS_PORT=${EMAIL_PARSER_HTTPS_PORT:-8301}
      - EMAIL_PARSER_HOST=0.0.0.0
      - HTTPS_ONLY=true  # ðŸ”’ Force HTTPS-only mode
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--cacert", "/etc/certs/ca.crt", "--cert", "/etc/certs/client.crt", "--key", "/etc/certs/client.key", "-f", "https://localhost:${EMAIL_PARSER_HTTPS_PORT:-8301}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 25s  # Email parser initialization time
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Streaming Service - HTTPS/mTLS ONLY (SSE, WebSocket, Real-time)
  crank-streaming:
    build:
      context: services
      dockerfile: Dockerfile.crank-streaming
    container_name: crank-streaming
    ports:
      - "${STREAMING_HTTPS_PORT:-8501}:${STREAMING_HTTPS_PORT:-8501}"  # ðŸ”’ HTTPS streaming endpoints and WebSocket with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
      - /home/johnr/projects/parse-email-archive/tests/data:/test-data:ro  # Mount test data
    environment:
      - CRANK_PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # ðŸ”’ ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=production  # ðŸ”’ HTTPS ONLY - no HTTP fallback
      - LOG_LEVEL=INFO
      - STREAMING_HTTPS_PORT=${STREAMING_HTTPS_PORT:-8501}
      - STREAMING_HOST=0.0.0.0
      - HTTPS_ONLY=true  # ðŸ”’ Force HTTPS-only mode
    depends_on:
      platform:
        condition: service_healthy
      crank-email-classifier:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--cacert", "/etc/certs/ca.crt", "--cert", "/etc/certs/client.crt", "--key", "/etc/certs/client.key", "-f", "https://localhost:${STREAMING_HTTPS_PORT:-8501}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Image Classifier Worker - HTTPS/mTLS ONLY
  crank-image-classifier:
    build:
      context: .
      dockerfile: image-classifier/Dockerfile
    container_name: crank-image-classifier
    ports:
      - "${IMAGE_CLASSIFIER_HTTPS_PORT:-8401}:${IMAGE_CLASSIFIER_HTTPS_PORT:-8401}"  # ðŸ”’ HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # ðŸ”’ ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=production  # ðŸ”’ HTTPS ONLY - no HTTP fallback
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - IMAGE_CLASSIFIER_HTTPS_PORT=${IMAGE_CLASSIFIER_HTTPS_PORT:-8401}
      - IMAGE_CLASSIFIER_HOST=0.0.0.0
      - HTTPS_ONLY=true  # ðŸ”’ Force HTTPS-only mode
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--cacert", "/etc/certs/ca.crt", "--cert", "/etc/certs/client.crt", "--key", "/etc/certs/client.key", "-f", "https://localhost:${IMAGE_CLASSIFIER_HTTPS_PORT:-8401}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 35s  # Computer vision models need time to initialize
    networks:
      - crank-net
    restart: unless-stopped

networks:
  crank-net:
    driver: bridge
    name: crank-network

volumes:
  platform-data:
    name: crank-platform-data
  certs-volume:
    name: crank-platform-certs