# Platform + Worker Architecture
# 
# This docker-compose sets up:
# - Platform service (PaaS layer) with auth, billing, discovery, routing
# - CrankDoc worker that registers with platform
# - Proper networking for service discovery

services:
  # Platform Service (PaaS Layer)
  platform:
    build:
      context: services
      dockerfile: Dockerfile.platform
    container_name: crank-platform
    ports:
      - "8080:8080"
    volumes:
      - certs-volume:/etc/certs  # Share certificates with workers
    environment:
      - PLATFORM_ENV=docker
      - CRANK_ENVIRONMENT=development  # Use development with HTTPS testing
      - LOG_LEVEL=INFO
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - crank-net
    restart: unless-stopped

  # CrankDoc Worker
  crankdoc-worker:
    build:
      context: services
      dockerfile: Dockerfile.crankdoc-worker
    container_name: crankdoc-worker
    ports:
      - "8081:8081"
      - "8443:8443"  # Add HTTPS port
    volumes:
      - certs-volume:/etc/certs  # Share certificates with platform
    environment:
      - PLATFORM_URL=http://platform:8080  # Keep platform registration as HTTP
      - CRANK_ENVIRONMENT=development  # Use development with HTTPS testing
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
    depends_on:
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - crank-net
    restart: unless-stopped

networks:
  crank-net:
    driver: bridge
    name: crank-network

volumes:
  platform-data:
    name: crank-platform-data
  certs-volume:
    name: crank-platform-certs