# Platform + Multi-Worker Architecture with Certificate Authority Service
# 
# This docker-compose sets up:
# - Certificate Authority Service (centralized certificate management)
# - Platform service (PaaS layer) with auth, billing, discovery, routing  
# - CrankDoc worker (document conversion) - Port 8100
# - CrankEmail Classifier worker (ML email classification) - Port 8200
# - CrankEmail Parser worker (bulk email parsing) - Port 8300
# - CrankStreaming worker (real-time streaming) - Port 8500
# - Proper networking for service discovery
# - Zero-trust mTLS security for all services
# - NO PORT CONFLICTS - Each service has dedicated port range

services:
  # Certificate Authority Service - Centralized certificate management
  cert-authority:
    build:
      context: services
      dockerfile: Dockerfile.cert-authority
    container_name: cert-authority
    environment:
      - CRANK_ENVIRONMENT=development-https
      - CERT_PROVIDER=development
      - CERT_SERVICE_PORT=9090
      - CERT_SERVICE_HOST=0.0.0.0
    volumes:
      - certs-volume:/app/certificates
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - crank-net
    restart: unless-stopped

  # Platform Service (PaaS Layer) - HTTPS/mTLS ONLY
  platform:
    build:
      context: services
      dockerfile: Dockerfile.platform
    container_name: crank-platform
    user: worker:worker  # üîí Non-root user for security
    ports:
      - "${PLATFORM_HTTPS_PORT:-8443}:${PLATFORM_HTTPS_PORT:-8443}"  # üîí HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs:ro  # Read-only access to certificates
    environment:
      - PLATFORM_ENV=docker
      - CRANK_ENVIRONMENT=development-https  # üîí HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_HTTPS_PORT=${PLATFORM_HTTPS_PORT:-8443}
      - HTTPS_ONLY=true  # üîí Force HTTPS-only mode
      - CA_SERVICE_URL=https://cert-authority:9090  # üîê Certificate Authority Service endpoint
      - CERT_DIR=/etc/certs
    depends_on:
      cert-authority:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${PLATFORM_HTTPS_PORT:-8443}/health/live"]  # üîí HTTPS with relaxed verification for dev certs
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - crank-net
    restart: unless-stopped

  # Crank Document Converter Worker - HTTPS/mTLS ONLY
  crank-doc-converter:
    build:
      context: services
      dockerfile: Dockerfile.crank-doc-converter
    container_name: crank-doc-converter
    user: worker:worker  # üîí Non-root user for security
    ports:
      - "${DOC_CONVERTER_HTTPS_PORT:-8101}:${DOC_CONVERTER_HTTPS_PORT:-8101}"  # üîí HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs:ro  # Read-only access to certificates
    environment:
      - PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # üîí ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=development-https  # üîí HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - DOC_CONVERTER_HTTPS_PORT=${DOC_CONVERTER_HTTPS_PORT:-8101}
      - DOC_CONVERTER_HOST=0.0.0.0
      - HTTPS_ONLY=true  # üîí Force HTTPS-only mode
      - CA_SERVICE_URL=https://cert-authority:9090  # üîê Certificate Authority Service endpoint
      - CERT_DIR=/etc/certs
    depends_on:
      cert-authority:
        condition: service_healthy
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${DOC_CONVERTER_HTTPS_PORT:-8101}/health"]  # üîí HTTPS health check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - crank-net
    restart: unless-stopped

  # CrankEmail Classifier Worker - HTTPS/mTLS ONLY
  crank-email-classifier:
    build:
      context: services
      dockerfile: Dockerfile.crank-email-classifier
    container_name: crank-email-classifier
    user: worker:worker  # üîí Non-root user for security
    ports:
      - "${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}:${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}"  # üîí HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs:ro  # Read-only access to certificates
    environment:
      - PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # üîí ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=development-https  # üîí HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - EMAIL_CLASSIFIER_HTTPS_PORT=${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}
      - EMAIL_CLASSIFIER_HOST=0.0.0.0
      - HTTPS_ONLY=true  # üîí Force HTTPS-only mode
      - CA_SERVICE_URL=https://cert-authority:9090  # üîê Certificate Authority Service endpoint
      - CERT_DIR=/etc/certs
    depends_on:
      cert-authority:
        condition: service_healthy
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${EMAIL_CLASSIFIER_HTTPS_PORT:-8201}/health"]  # üîí HTTPS health check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - crank-net
    restart: unless-stopped

  # CrankEmail Parser Worker - HTTPS/mTLS ONLY
  crank-email-parser:
    build:
      context: services
      dockerfile: Dockerfile.crank-email-parser
    container_name: crank-email-parser
    user: worker:worker  # üîí Non-root user for security
    ports:
      - "${EMAIL_PARSER_HTTPS_PORT:-8301}:${EMAIL_PARSER_HTTPS_PORT:-8301}"  # üîí HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs:ro  # Read-only access to certificates
    environment:
      - PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # üîí ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=development-https  # üîí HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - EMAIL_PARSER_HTTPS_PORT=${EMAIL_PARSER_HTTPS_PORT:-8301}
      - EMAIL_PARSER_HOST=0.0.0.0
      - HTTPS_ONLY=true  # üîí Force HTTPS-only mode
      - CA_SERVICE_URL=https://cert-authority:9090  # üîê Certificate Authority Service endpoint
      - CERT_DIR=/etc/certs
    depends_on:
      cert-authority:
        condition: service_healthy
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${EMAIL_PARSER_HTTPS_PORT:-8301}/health"]  # üîí HTTPS health check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - crank-net
    restart: unless-stopped

  # CrankStreaming Worker - HTTPS/mTLS ONLY
  crank-streaming:
    build:
      context: services
      dockerfile: Dockerfile.crank-streaming
    container_name: crank-streaming
    user: worker:worker  # üîí Non-root user for security
    ports:
      - "${STREAMING_HTTPS_PORT:-8501}:${STREAMING_HTTPS_PORT:-8501}"  # üîí HTTPS with mTLS ONLY
    volumes:
      - certs-volume:/etc/certs:ro  # Read-only access to certificates
    environment:
      - PLATFORM_URL=https://platform:${PLATFORM_HTTPS_PORT:-8443}  # üîí ZERO-TRUST: HTTPS ONLY
      - CRANK_ENVIRONMENT=development-https  # üîí HTTPS-only with relaxed cert verification
      - LOG_LEVEL=INFO
      - PLATFORM_AUTH_TOKEN=dev-mesh-key
      - STREAMING_HTTPS_PORT=${STREAMING_HTTPS_PORT:-8501}
      - STREAMING_HOST=0.0.0.0
      - HTTPS_ONLY=true  # üîí Force HTTPS-only mode
      - CA_SERVICE_URL=https://cert-authority:9090  # üîê Certificate Authority Service endpoint
      - CERT_DIR=/etc/certs
    depends_on:
      cert-authority:
        condition: service_healthy
      platform:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:${STREAMING_HTTPS_PORT:-8501}/health"]  # üîí HTTPS health check
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - crank-net
    restart: unless-stopped

# Networks
networks:
  crank-net:
    driver: bridge
    name: crank-network

# Volumes
volumes:
  certs-volume:
    driver: local
    name: crank-certificates