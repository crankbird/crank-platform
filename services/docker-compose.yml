version: '3.8'

services:
  # CrankDoc mesh service
  crank-doc:
    build:
      context: .
      dockerfile: Dockerfile.crankdoc
    ports:
      - "8000:8000"
    environment:
      - MESH_SERVICE_TYPE=document
      - MESH_NODE_ID=crankdoc-001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # CrankEmail mesh service  
  crank-email:
    build:
      context: .
      dockerfile: Dockerfile.crankemail
    ports:
      - "8001:8000"
    environment:
      - MESH_SERVICE_TYPE=email
      - MESH_NODE_ID=crankemail-001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Platform gateway
  crank-gateway:
    build:
      context: .
      dockerfile: Dockerfile.gateway
    ports:
      - "8080:8000"
    environment:
      - MESH_GATEWAY=true
    depends_on:
      - crank-doc
      - crank-email
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for coordination (future use)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped

  # OPA for policy engine (future use)
  opa:
    image: openpolicyagent/opa:latest-envoy
    ports:
      - "8181:8181"
    command:
      - "run"
      - "--server"
      - "--log-level=info"
      - "/policies"
    volumes:
      - ./policies:/policies
    restart: unless-stopped

volumes:
  redis_data: